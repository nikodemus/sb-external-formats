(in-package :sb-external-format)

(define-character-encoding :utf-8
  (:nicknames :utf8)
  (:documentation "Variable length encoding.")
  (:eol-info '((:lf 10)
               (:cr 13)
               (:crlf 13 10))))

(defun foo () nil)

(defencoder :utf-8 (src src-offset dst dst-offset length limit)
  (macrolet ((set-byte (offset value)
               `(setf (sap-ref-8 dst (+ k ,offset)) ,value)))
    (let ((limit-4 (- limit 4))
          (length length))
      (declare (index limit-4 length))
      (do ((i 0 (1+ i))
           (j 0))
          ((or (= i length) (>= j limit-4))
           (values i j))
        (declare (index i j) (optimize (safety 0) (speed 3)))
        (let ((k (+ dst-offset j)))
          (do-code (code (char src (+ src-offset i)))
            (:cr
             (set-byte 0 13)
             (incf j 1))
            (:crlf
             (set-byte 0 13)
             (set-byte 1 10)
             (incf j 2))
            (cond ((< code #x80)
                   (set-byte 0 code)
                   (incf j))
                  ((< code #x800)
                   (set-byte 0 (logior #xc0 (ash code -6)))
                   (set-byte 1 (logior #x80 (logand #x3f code)))
                   (incf j 2))
                  ((< code #x10000)
                   (set-byte 0 (logior #xe0 (ash code -12)))
                   (set-byte 1 (logior #x80 (logand #x3f (ash code -6))))
                   (set-byte 2 (logior #x80 (logand #x3f code)))
                   (incf j 3))
                  (t
                   (set-byte 0 (logior #xf0 (logand #x07 (ash code -18))))
                   (set-byte 1 (logior #x80 (logand #x3f (ash code -12))))
                   (set-byte 2 (logior #x80 (logand #x3f (ash code -6))))
                   (set-byte 3 (logior #x80 (logand #x3f code)))
                   (incf j 4)))))))))
