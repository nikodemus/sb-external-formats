(in-package :sb-external-format)

(define-character-encoding :utf-8
  (:nicknames :utf8)
  (:documentation "Variable length encoding.")
  (:eol-info '((:lf 10)
               (:cr 13)
               (:crlf 13 10))))

(defencoder :utf-8 (src src-offset dst dst-offset length limit eol-0 eol-1)
  (macrolet ((set-byte (offset value)
               `(setf (sap-ref-8 dst (+ k ,offset)) ,value)))
    (with-eol-encoding (eol-0 eol-1)
      (let ((limit (- limit 4)))
        (declare (index limit))
        (do ((i 0 (1+ i))
             (j 0))
            ((or (>= i length) (>= j limit))
             (values i j))
          (declare (index i j) (optimize (safety 0) (speed 3)))
          (do-codes (code (char src (+ src-offset i)))
            (let ((k (+ dst-offset j)))
              (cond ((< code #x80)
                     (set-byte 0 code)
                     (incf j 1))
                    ((< code #x800)
                     (set-byte 0 (logior #xc0 (ash code -6)))
                     (set-byte 1 (logior #x80 (logand #x3f code)))
                     (incf j 2))
                    ((< code #x10000)
                     (set-byte 0 (logior #xe0 (ash code -12)))
                     (set-byte 1 (logior #x80 (logand #x3f (ash code -6))))
                     (set-byte 2 (logior #x80 (logand #x3f code)))
                     (incf j 3))
                    (t
                     (set-byte 0 (logior #xf0 (logand #x07 (ash code -18))))
                     (set-byte 1 (logior #x80 (logand #x3f (ash code -12))))
                     (set-byte 2 (logior #x80 (logand #x3f (ash code -6))))
                     (set-byte 3 (logior #x80 (logand #x3f code)))
                     (incf j 4))))))))))
